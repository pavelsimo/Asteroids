CMAKE_MINIMUM_REQUIRED(VERSION 2.8.4)
PROJECT(Asteroids)

# Modules
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")

# Ouput directories
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/bin)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/bin)

# GLUT
FIND_PACKAGE(GLUT REQUIRED)
INCLUDE_DIRECTORIES(${GLUT_INCLUDE_DIRS})
LINK_DIRECTORIES(${GLUT_LIBRARY_DIRS})
ADD_DEFINITIONS(${GLUT_DEFINITIONS})
IF(NOT GLUT_FOUND)
    MESSAGE(ERROR " GLUT not found!")
ENDIF(NOT GLUT_FOUND)

# OpenGL
FIND_PACKAGE(OpenGL REQUIRED)
INCLUDE_DIRECTORIES(${OpenGL_INCLUDE_DIRS})
LINK_DIRECTORIES(${OpenGL_LIBRARY_DIRS})
ADD_DEFINITIONS(${OpenGL_DEFINITIONS})
IF(NOT OPENGL_FOUND)
    MESSAGE(ERROR " OPENGL not found!")
ENDIF(NOT OPENGL_FOUND)

# DevIL
FIND_PACKAGE(DevIL REQUIRED)
IF(NOT IL_FOUND)
    MESSAGE(ERROR " DevIL not found!")
ENDIF(NOT IL_FOUND)

# OpenAL
FIND_PACKAGE(OPENAL REQUIRED)
IF(NOT OPENAL_FOUND)
    MESSAGE(ERROR " OPENAL not found!")
ENDIF(NOT OPENAL_FOUND)

# ALUT
FIND_PACKAGE(ALUT REQUIRED)
IF(NOT ALUT_FOUND)
    MESSAGE(ERROR " ALUT not found!")
ENDIF(NOT ALUT_FOUND)

# Xerces-C
FIND_PACKAGE(XercesC REQUIRED)
IF(NOT XERCESC_FOUND)
    MESSAGE(ERROR " Xerces-C not found!")
ENDIF(NOT XERCESC_FOUND)

# C++11
INCLUDE(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
if(COMPILER_SUPPORTS_CXX11)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
elseif(COMPILER_SUPPORTS_CXX0X)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
else()
        MESSAGE(STATUS "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
endif()

ADD_EXECUTABLE(
    ${PROJECT_NAME}
    src/main.cpp
    src/World.cpp
    src/Drawing.cpp
    src/MathUtilities.cpp
    src/Vector2.cpp
    src/AABB2.cpp
    src/Actor.cpp
    src/Player.cpp
    src/Bullet.cpp
    src/Asteroid.cpp
    src/AsteroidFactory.cpp
    src/EnemyShip.cpp
    src/BitmapFont.cpp
    src/Texture.cpp
    src/BitmapFontXMLParser.cxx
    src/SoundManager.cpp
    src/FileSystem.cpp
)

TARGET_LINK_LIBRARIES(
    ${PROJECT_NAME}
    ${OPENGL_LIBRARIES}
    ${GLUT_LIBRARY}
    ${IL_LIBRARIES}
    ${ILU_LIBRARIES}
    ${ILUT_LIBRARIES}
    ${OPENAL_LIBRARY}
    ${ALUT_LIBRARY}
    ${XERCESC_LIBRARY}
)

# Copy fonts
ADD_CUSTOM_COMMAND(
    TARGET ${PROJECT_NAME} PRE_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_directory
    ${CMAKE_SOURCE_DIR}/fonts ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}/fonts
)

# Copy sounds
ADD_CUSTOM_COMMAND(
    TARGET ${PROJECT_NAME} PRE_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_directory
    ${CMAKE_SOURCE_DIR}/sounds ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}/sounds
)